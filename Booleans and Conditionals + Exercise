{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "57f188a6",
   "metadata": {
    "papermill": {
     "duration": 0.009016,
     "end_time": "2025-08-12T06:12:32.311196",
     "exception": false,
     "start_time": "2025-08-12T06:12:32.302180",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Using booleans for branching logic"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b878c2ed",
   "metadata": {
    "papermill": {
     "duration": 0.007645,
     "end_time": "2025-08-12T06:12:32.326917",
     "exception": false,
     "start_time": "2025-08-12T06:12:32.319272",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Booleans\n",
    "Python has a type of variable called `bool`. It has two possible values: `True` and `False`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "fea256fc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-12T06:12:32.345193Z",
     "iopub.status.busy": "2025-08-12T06:12:32.344799Z",
     "iopub.status.idle": "2025-08-12T06:12:32.354198Z",
     "shell.execute_reply": "2025-08-12T06:12:32.353343Z"
    },
    "papermill": {
     "duration": 0.020614,
     "end_time": "2025-08-12T06:12:32.355471",
     "exception": false,
     "start_time": "2025-08-12T06:12:32.334857",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n",
      "<class 'bool'>\n"
     ]
    }
   ],
   "source": [
    "x = True\n",
    "print(x)\n",
    "print(type(x))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cbc35703",
   "metadata": {
    "papermill": {
     "duration": 0.008001,
     "end_time": "2025-08-12T06:12:32.371701",
     "exception": false,
     "start_time": "2025-08-12T06:12:32.363700",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Rather than putting `True` or `False` directly in our code, we usually get boolean values from **boolean operators**. These are<br> operators that answer yes/no questions. We'll go through some of these operators below."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "19cb0c95",
   "metadata": {
    "papermill": {
     "duration": 0.007573,
     "end_time": "2025-08-12T06:12:32.387211",
     "exception": false,
     "start_time": "2025-08-12T06:12:32.379638",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Comparison Operations\n",
    "\n",
    "\n",
    "|Operation|\t|Description|\t\t|Operation|\t|Description|\n",
    "\n",
    "|a == b|\t|a equal to b|\t\t|a != b|\t|a not equal to b|\n",
    "\n",
    "|a < b|\t|a less than b|\t\t|a > b|\t|a greater than b|\n",
    "\n",
    "|a <= b|\t|a less than or equal to b|\t\t|a >= b|\ta greater than or equal to b|\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "0217e885",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-12T06:12:32.404289Z",
     "iopub.status.busy": "2025-08-12T06:12:32.404006Z",
     "iopub.status.idle": "2025-08-12T06:12:32.409919Z",
     "shell.execute_reply": "2025-08-12T06:12:32.409017Z"
    },
    "papermill": {
     "duration": 0.016264,
     "end_time": "2025-08-12T06:12:32.411272",
     "exception": false,
     "start_time": "2025-08-12T06:12:32.395008",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Can a 19-year-old run for president? False\n",
      "Can a 45-year-old run for president? True\n"
     ]
    }
   ],
   "source": [
    "def can_run_for_president(age):\n",
    "    \"\"\"Can someone of the given age run for president in the US?\"\"\"\n",
    "    # The US Constitution says you must be at least 35 years old\n",
    "    return age >= 35\n",
    "\n",
    "print(\"Can a 19-year-old run for president?\", can_run_for_president(19))\n",
    "print(\"Can a 45-year-old run for president?\", can_run_for_president(45))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "14f43b9e",
   "metadata": {
    "papermill": {
     "duration": 0.007783,
     "end_time": "2025-08-12T06:12:32.427063",
     "exception": false,
     "start_time": "2025-08-12T06:12:32.419280",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Comparisons frequently work like you'd hope"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ca17e2d3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-12T06:12:32.444203Z",
     "iopub.status.busy": "2025-08-12T06:12:32.443938Z",
     "iopub.status.idle": "2025-08-12T06:12:32.450370Z",
     "shell.execute_reply": "2025-08-12T06:12:32.449503Z"
    },
    "papermill": {
     "duration": 0.016836,
     "end_time": "2025-08-12T06:12:32.451867",
     "exception": false,
     "start_time": "2025-08-12T06:12:32.435031",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "3.0 == 3"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fbf16a51",
   "metadata": {
    "papermill": {
     "duration": 0.007885,
     "end_time": "2025-08-12T06:12:32.468049",
     "exception": false,
     "start_time": "2025-08-12T06:12:32.460164",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "But sometimes they can be tricky"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "882b8e18",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-12T06:12:32.485626Z",
     "iopub.status.busy": "2025-08-12T06:12:32.485325Z",
     "iopub.status.idle": "2025-08-12T06:12:32.490550Z",
     "shell.execute_reply": "2025-08-12T06:12:32.489884Z"
    },
    "papermill": {
     "duration": 0.015908,
     "end_time": "2025-08-12T06:12:32.492038",
     "exception": false,
     "start_time": "2025-08-12T06:12:32.476130",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'3' == 3"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c3971aed",
   "metadata": {
    "papermill": {
     "duration": 0.00782,
     "end_time": "2025-08-12T06:12:32.508107",
     "exception": false,
     "start_time": "2025-08-12T06:12:32.500287",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Comparison operators can be combined with the arithmetic operators we've already seen to express a virtually limitless range of<br> mathematical tests. For example, we can check if a number is odd by checking that the modulus with 2 returns 1:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "556a01fe",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-12T06:12:32.525291Z",
     "iopub.status.busy": "2025-08-12T06:12:32.525026Z",
     "iopub.status.idle": "2025-08-12T06:12:32.529847Z",
     "shell.execute_reply": "2025-08-12T06:12:32.529030Z"
    },
    "papermill": {
     "duration": 0.01504,
     "end_time": "2025-08-12T06:12:32.531127",
     "exception": false,
     "start_time": "2025-08-12T06:12:32.516087",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Is 100 odd? False\n",
      "Is -1 odd? True\n"
     ]
    }
   ],
   "source": [
    "def is_odd(n):\n",
    "    return (n % 2) == 1\n",
    "\n",
    "print(\"Is 100 odd?\", is_odd(100))\n",
    "print(\"Is -1 odd?\", is_odd(-1))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9ba56197",
   "metadata": {
    "papermill": {
     "duration": 0.007865,
     "end_time": "2025-08-12T06:12:32.547180",
     "exception": false,
     "start_time": "2025-08-12T06:12:32.539315",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Remember to use `==` instead of `=` when making comparisons. If you write `n == 2` you are asking about the value of n. When you<br> write `n = 2` you are changing the value of n."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a8ab4b1f",
   "metadata": {
    "papermill": {
     "duration": 0.007902,
     "end_time": "2025-08-12T06:12:32.563319",
     "exception": false,
     "start_time": "2025-08-12T06:12:32.555417",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Combining Boolean Values"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aed32b0f",
   "metadata": {
    "papermill": {
     "duration": 0.007842,
     "end_time": "2025-08-12T06:12:32.579264",
     "exception": false,
     "start_time": "2025-08-12T06:12:32.571422",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "You can combine boolean values using the standard concepts of \"and\", \"or\", and \"not\". In fact, the words to do this are: `and`, `or`, <br>and `not`.\n",
    "\n",
    "With these, we can make our `can_run_for_president` function more accurate."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "a3d72367",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-12T06:12:32.661428Z",
     "iopub.status.busy": "2025-08-12T06:12:32.661170Z",
     "iopub.status.idle": "2025-08-12T06:12:32.666785Z",
     "shell.execute_reply": "2025-08-12T06:12:32.665697Z"
    },
    "papermill": {
     "duration": 0.016483,
     "end_time": "2025-08-12T06:12:32.668186",
     "exception": false,
     "start_time": "2025-08-12T06:12:32.651703",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "False\n",
      "False\n",
      "True\n"
     ]
    }
   ],
   "source": [
    "def can_run_for_president(age, is_natural_born_citizen):\n",
    "    \"\"\"Can someone of the given age and citizenship status run for president in the US?\"\"\"\n",
    "    # The US Constitution says you must be a natural born citizen *and* at least 35 years old\n",
    "    return is_natural_born_citizen and (age >= 35)\n",
    "\n",
    "print(can_run_for_president(19, True))\n",
    "print(can_run_for_president(55, False))\n",
    "print(can_run_for_president(55, True))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5ba8b014",
   "metadata": {
    "papermill": {
     "duration": 0.008126,
     "end_time": "2025-08-12T06:12:32.684889",
     "exception": false,
     "start_time": "2025-08-12T06:12:32.676763",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Quick, can you guess the value of this expression?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "fe55fc2e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-12T06:12:32.702893Z",
     "iopub.status.busy": "2025-08-12T06:12:32.702300Z",
     "iopub.status.idle": "2025-08-12T06:12:32.707403Z",
     "shell.execute_reply": "2025-08-12T06:12:32.706654Z"
    },
    "papermill": {
     "duration": 0.015691,
     "end_time": "2025-08-12T06:12:32.708785",
     "exception": false,
     "start_time": "2025-08-12T06:12:32.693094",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "True or True and False"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3eb5101d",
   "metadata": {
    "papermill": {
     "duration": 0.008083,
     "end_time": "2025-08-12T06:12:32.725248",
     "exception": false,
     "start_time": "2025-08-12T06:12:32.717165",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "(Click the \"output\" button to see the answer)\n",
    "\n",
    "To answer this, you'd need to figure out the order of operations.\n",
    "\n",
    "For example, and is evaluated before or. That's why the first expression above is True. If we evaluated it from left to right, we would<br> have calculated True or True first (which is True), and then taken the and of that result with False, giving a final<br> value of False.\n",
    "\n",
    "You could try to memorize the order of precedence, but a safer bet is to just use liberal parentheses. Not only does this help prevent<br> bugs, it makes your intentions clearer to anyone who reads your code.\n",
    "\n",
    "For example, consider the following expression:\n",
    "> prepared_for_weather = have_umbrella or (rain_level < 5 and have_hood) or not (rain_level > 0 and is_workday)\n",
    "\n",
    "I'm trying to say that I'm safe from today's weather....\n",
    "\n",
    "* if I have an umbrella...\n",
    "* or if the rain isn't too heavy and I have a hood...\n",
    "* otherwise, I'm still fine unless it's raining and it's a workday\n",
    "  \n",
    "But not only is my Python code hard to read, it has a bug. We can address both problems by adding some parentheses:\n",
    "> prepared_for_weather = have_umbrella or (rain_level < 5 and have_hood) or not (rain_level > 0 and is_workday)\n",
    "\n",
    "You can add even more parentheses if you think it helps readability:\n",
    "\n",
    "> prepared_for_weather = have_umbrella or ((rain_level < 5) and have_hood) or (not (rain_level > 0 and is_workday))\n",
    "\n",
    "We can also split it over multiple lines to emphasize the 3-part structure described above:\n",
    "\n",
    ">prepared_for_weather = (\n",
    "    have_umbrella \n",
    "    or ((rain_level < 5) and have_hood) \n",
    "    or (not (rain_level > 0 and is_workday))\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a98b8a04",
   "metadata": {
    "papermill": {
     "duration": 0.008079,
     "end_time": "2025-08-12T06:12:32.741637",
     "exception": false,
     "start_time": "2025-08-12T06:12:32.733558",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Conditionals\n",
    "Booleans are most useful when combined with conditional statements, using the keywords `if`, `elif`, and `else`.\n",
    "\n",
    "Conditional statements, often referred to as if-then statements, let you control what pieces of code are run based on the value of some Boolean condition. Here's an example:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "7b1e10ea",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-12T06:12:32.760236Z",
     "iopub.status.busy": "2025-08-12T06:12:32.759958Z",
     "iopub.status.idle": "2025-08-12T06:12:32.765653Z",
     "shell.execute_reply": "2025-08-12T06:12:32.764635Z"
    },
    "papermill": {
     "duration": 0.016617,
     "end_time": "2025-08-12T06:12:32.767047",
     "exception": false,
     "start_time": "2025-08-12T06:12:32.750430",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0 is zero\n",
      "-15 is negative\n"
     ]
    }
   ],
   "source": [
    "def inspect(x):\n",
    "    if x == 0:\n",
    "        print(x, \"is zero\")\n",
    "    elif x > 0:\n",
    "        print(x, \"is positive\")\n",
    "    elif x < 0:\n",
    "        print(x, \"is negative\")\n",
    "    else:\n",
    "        print(x, \"is unlike anything I've ever seen...\")\n",
    "\n",
    "inspect(0)\n",
    "inspect(-15)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dfd0bc92",
   "metadata": {
    "papermill": {
     "duration": 0.008263,
     "end_time": "2025-08-12T06:12:32.783940",
     "exception": false,
     "start_time": "2025-08-12T06:12:32.775677",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The `if` and `else` keywords are often used in other languages; its more unique keyword is `elif`, a contraction of \"else if\". In <br>these conditional clauses, `elif` and `else` blocks are optional; additionally, you can include as many `elif` statements as you<br> would like.\n",
    "\n",
    "Note especially the use of colons (`:`) and whitespace to denote separate blocks of code. This is similar to what happens when we<br> define a function - the function header ends with `:`, and the following line is indented with 4 spaces. All subsequent indented lines<br> belong to the body of the function, until we encounter an unindented line, ending the function definition."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "1b333c9c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-12T06:12:32.802212Z",
     "iopub.status.busy": "2025-08-12T06:12:32.801530Z",
     "iopub.status.idle": "2025-08-12T06:12:32.806739Z",
     "shell.execute_reply": "2025-08-12T06:12:32.805879Z"
    },
    "papermill": {
     "duration": 0.015769,
     "end_time": "2025-08-12T06:12:32.808101",
     "exception": false,
     "start_time": "2025-08-12T06:12:32.792332",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Only printed when x is positive; x = 1\n",
      "Also only printed when x is positive; x = 1\n",
      "Always printed, regardless of x's value; x = 1\n",
      "Always printed, regardless of x's value; x = 0\n"
     ]
    }
   ],
   "source": [
    "def f(x):\n",
    "    if x > 0:\n",
    "        print(\"Only printed when x is positive; x =\", x)\n",
    "        print(\"Also only printed when x is positive; x =\", x)\n",
    "    print(\"Always printed, regardless of x's value; x =\", x)\n",
    "\n",
    "f(1)\n",
    "f(0)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6c5861c6",
   "metadata": {
    "papermill": {
     "duration": 0.008165,
     "end_time": "2025-08-12T06:12:32.824872",
     "exception": false,
     "start_time": "2025-08-12T06:12:32.816707",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Boolean conversion\n",
    "We've seen int(), which turns things into ints, and float(), which turns things into floats, so you might not be surprised to hear<br> that Python has a bool() function which turns things into bools."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "af9132d6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-12T06:12:32.842758Z",
     "iopub.status.busy": "2025-08-12T06:12:32.842429Z",
     "iopub.status.idle": "2025-08-12T06:12:32.847346Z",
     "shell.execute_reply": "2025-08-12T06:12:32.846419Z"
    },
    "papermill": {
     "duration": 0.015491,
     "end_time": "2025-08-12T06:12:32.848708",
     "exception": false,
     "start_time": "2025-08-12T06:12:32.833217",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n",
      "False\n",
      "True\n",
      "False\n"
     ]
    }
   ],
   "source": [
    "print(bool(1)) # all numbers are treated as true, except 0\n",
    "print(bool(0))\n",
    "print(bool(\"asf\")) # all strings are treated as true, except the empty string \"\"\n",
    "print(bool(\"\"))\n",
    "# Generally empty sequences (strings, lists, and other types we've yet to see like lists and tuples)\n",
    "# are \"falsey\" and the rest are \"truthy\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "150bb83d",
   "metadata": {
    "papermill": {
     "duration": 0.008158,
     "end_time": "2025-08-12T06:12:32.865479",
     "exception": false,
     "start_time": "2025-08-12T06:12:32.857321",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "We can use non-boolean objects in `if` conditions and other places where a boolean would be expected. Python will implicitly treat<br> them as their corresponding boolean value:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "26003eb8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-12T06:12:32.883871Z",
     "iopub.status.busy": "2025-08-12T06:12:32.883209Z",
     "iopub.status.idle": "2025-08-12T06:12:32.887515Z",
     "shell.execute_reply": "2025-08-12T06:12:32.886544Z"
    },
    "papermill": {
     "duration": 0.014947,
     "end_time": "2025-08-12T06:12:32.888855",
     "exception": false,
     "start_time": "2025-08-12T06:12:32.873908",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "spam\n"
     ]
    }
   ],
   "source": [
    "if 0:\n",
    "    print(0)\n",
    "elif \"spam\":\n",
    "    print(\"spam\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "93594188",
   "metadata": {
    "papermill": {
     "duration": 0.008427,
     "end_time": "2025-08-12T06:12:32.905972",
     "exception": false,
     "start_time": "2025-08-12T06:12:32.897545",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Exercise:\n",
    "This notebook is an exercise in the Python course.\n",
    "\n",
    "In this exercise, you'll put to work what you have learned about booleans and conditionals.\n",
    "\n",
    "To get started, **run the setup code below** before writing your own code (and if you leave this notebook and come back later, don't<br> forget to run the setup code again)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "c7d86cc1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-12T06:12:32.924467Z",
     "iopub.status.busy": "2025-08-12T06:12:32.923819Z",
     "iopub.status.idle": "2025-08-12T06:12:34.769970Z",
     "shell.execute_reply": "2025-08-12T06:12:34.768898Z"
    },
    "papermill": {
     "duration": 1.857356,
     "end_time": "2025-08-12T06:12:34.771791",
     "exception": false,
     "start_time": "2025-08-12T06:12:32.914435",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Setup complete.\n"
     ]
    }
   ],
   "source": [
    "from learntools.core import binder; binder.bind(globals())\n",
    "from learntools.python.ex3 import *\n",
    "print('Setup complete.')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "76ab6eae",
   "metadata": {
    "papermill": {
     "duration": 0.008544,
     "end_time": "2025-08-12T06:12:34.789526",
     "exception": false,
     "start_time": "2025-08-12T06:12:34.780982",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 1.\n",
    "\n",
    "Many programming languages have [`sign`](https://en.wikipedia.org/wiki/Sign_function) available as a built-in function. Python doesn't, but we can define our own!\n",
    "\n",
    "In the cell below, define a function called `sign` which takes a numerical argument and returns -1 if it's negative, 1 if it's positive, and 0 if it's 0."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "8637b6e5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-12T06:12:34.808485Z",
     "iopub.status.busy": "2025-08-12T06:12:34.808075Z",
     "iopub.status.idle": "2025-08-12T06:12:34.815928Z",
     "shell.execute_reply": "2025-08-12T06:12:34.815098Z"
    },
    "papermill": {
     "duration": 0.018839,
     "end_time": "2025-08-12T06:12:34.817218",
     "exception": false,
     "start_time": "2025-08-12T06:12:34.798379",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.2, \"interactionType\": 1, \"questionType\": 2, \"questionId\": \"1_SignFunctionProblem\", \"learnToolsVersion\": \"0.3.5\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#33cc33\">Correct</span>"
      ],
      "text/plain": [
       "Correct"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Your code goes here. Define a function called 'sign'\n",
    "def sign(num):\n",
    "    if num<0:\n",
    "        return -1\n",
    "    elif num>0:\n",
    "        return 1\n",
    "    elif num==0:\n",
    "        return 0\n",
    "    else:\n",
    "        return 'unknown number'\n",
    "# Check your answer\n",
    "q1.check()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "57844a17",
   "metadata": {
    "papermill": {
     "duration": 0.008518,
     "end_time": "2025-08-12T06:12:34.834749",
     "exception": false,
     "start_time": "2025-08-12T06:12:34.826231",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 2.\n",
    "\n",
    "We've decided to add \"logging\" to our `to_smash` function from the previous exercise."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "7a1a3dea",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-12T06:12:34.853830Z",
     "iopub.status.busy": "2025-08-12T06:12:34.853031Z",
     "iopub.status.idle": "2025-08-12T06:12:34.859404Z",
     "shell.execute_reply": "2025-08-12T06:12:34.858685Z"
    },
    "papermill": {
     "duration": 0.017293,
     "end_time": "2025-08-12T06:12:34.860725",
     "exception": false,
     "start_time": "2025-08-12T06:12:34.843432",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Splitting 91 candies\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def to_smash(total_candies):\n",
    "    \"\"\"Return the number of leftover candies that must be smashed after distributing\n",
    "    the given number of candies evenly between 3 friends.\n",
    "    \n",
    "    >>> to_smash(91)\n",
    "    1\n",
    "    \"\"\"\n",
    "    print(\"Splitting\", total_candies, \"candies\")\n",
    "    return total_candies % 3\n",
    "\n",
    "to_smash(91)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a4ffb1c8",
   "metadata": {
    "papermill": {
     "duration": 0.008628,
     "end_time": "2025-08-12T06:12:34.878497",
     "exception": false,
     "start_time": "2025-08-12T06:12:34.869869",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "What happens if we call it with `total_candies = 1`?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "45e063d9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-12T06:12:34.898298Z",
     "iopub.status.busy": "2025-08-12T06:12:34.897297Z",
     "iopub.status.idle": "2025-08-12T06:12:34.903643Z",
     "shell.execute_reply": "2025-08-12T06:12:34.902798Z"
    },
    "papermill": {
     "duration": 0.017545,
     "end_time": "2025-08-12T06:12:34.904969",
     "exception": false,
     "start_time": "2025-08-12T06:12:34.887424",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Splitting 1 candies\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "to_smash(1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f05207ce",
   "metadata": {
    "papermill": {
     "duration": 0.009155,
     "end_time": "2025-08-12T06:12:34.923293",
     "exception": false,
     "start_time": "2025-08-12T06:12:34.914138",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "That isn't great grammar!\n",
    "\n",
    "Modify the definition in the cell below to correct the grammar of our print statement. (If there's only one candy, we should use the<br> singular \"candy\" instead of the plural \"candies\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "3379d205",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-12T06:12:34.943334Z",
     "iopub.status.busy": "2025-08-12T06:12:34.942539Z",
     "iopub.status.idle": "2025-08-12T06:12:34.949441Z",
     "shell.execute_reply": "2025-08-12T06:12:34.948659Z"
    },
    "papermill": {
     "duration": 0.01849,
     "end_time": "2025-08-12T06:12:34.950888",
     "exception": false,
     "start_time": "2025-08-12T06:12:34.932398",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Splitting 91 candies\n",
      "Splitting 1 candies\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def to_smash(total_candies):\n",
    "    \"\"\"Return the number of leftover candies that must be smashed after distributing\n",
    "    the given number of candies evenly between 3 friends.\n",
    "    \n",
    "    >>> to_smash(91)\n",
    "    1\n",
    "    \"\"\"\n",
    "    print(\"Splitting\", total_candies, \"candies\")\n",
    "    return total_candies % 3\n",
    "\n",
    "to_smash(91)\n",
    "to_smash(1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7b13cea6",
   "metadata": {
    "papermill": {
     "duration": 0.00926,
     "end_time": "2025-08-12T06:12:34.969785",
     "exception": false,
     "start_time": "2025-08-12T06:12:34.960525",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "To get credit for completing this problem, and to see the official answer, run the code cell below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "701e2d14",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-12T06:12:34.989831Z",
     "iopub.status.busy": "2025-08-12T06:12:34.989418Z",
     "iopub.status.idle": "2025-08-12T06:12:34.996089Z",
     "shell.execute_reply": "2025-08-12T06:12:34.995416Z"
    },
    "papermill": {
     "duration": 0.018371,
     "end_time": "2025-08-12T06:12:34.997475",
     "exception": false,
     "start_time": "2025-08-12T06:12:34.979104",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"interactionType\": 3, \"questionType\": 4, \"questionId\": \"2_PluralizationProblem\", \"learnToolsVersion\": \"0.3.5\", \"valueTowardsCompletion\": 0.0, \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\", \"outcomeType\": 4}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#33cc99\">Solution:</span> A straightforward (and totally fine) solution is to replace the original `print` call with:\n",
       "\n",
       "```python\n",
       "if total_candies == 1:\n",
       "    print(\"Splitting 1 candy\")\n",
       "else:\n",
       "    print(\"Splitting\", total_candies, \"candies\")\n",
       "```\n",
       "\n",
       "Here's a slightly more succinct solution using a conditional expression:\n",
       "\n",
       "```python\n",
       "print(\"Splitting\", total_candies, \"candy\" if total_candies == 1 else \"candies\")\n",
       "```"
      ],
      "text/plain": [
       "Solution: A straightforward (and totally fine) solution is to replace the original `print` call with:\n",
       "\n",
       "```python\n",
       "if total_candies == 1:\n",
       "    print(\"Splitting 1 candy\")\n",
       "else:\n",
       "    print(\"Splitting\", total_candies, \"candies\")\n",
       "```\n",
       "\n",
       "Here's a slightly more succinct solution using a conditional expression:\n",
       "\n",
       "```python\n",
       "print(\"Splitting\", total_candies, \"candy\" if total_candies == 1 else \"candies\")\n",
       "```"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Check your answer (Run this code cell to receive credit!)\n",
    "q2.solution()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e5afb0fe",
   "metadata": {
    "papermill": {
     "duration": 0.009219,
     "end_time": "2025-08-12T06:12:35.016261",
     "exception": false,
     "start_time": "2025-08-12T06:12:35.007042",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 3. <span title=\"A bit spicy\" style=\"color: darkgreen \">🌶️</span>\n",
    "\n",
    "In the tutorial, we talked about deciding whether we're prepared for the weather. I said that I'm safe from today's weather if...\n",
    "- I have an umbrella...\n",
    "- or if the rain isn't too heavy and I have a hood...\n",
    "- otherwise, I'm still fine unless it's raining *and* it's a workday\n",
    "\n",
    "The function below uses our first attempt at turning this logic into a Python expression. I claimed that there was a bug in that code. Can you find it?\n",
    "\n",
    "To prove that `prepared_for_weather` is buggy, come up with a set of inputs where either:\n",
    "- the function returns `False` (but should have returned `True`), or\n",
    "- the function returned `True` (but should have returned `False`).\n",
    "\n",
    "To get credit for completing this question, your code should return a <font color='#33cc33'>Correct</font> result."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "fc0edd79",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-12T06:12:35.037109Z",
     "iopub.status.busy": "2025-08-12T06:12:35.036799Z",
     "iopub.status.idle": "2025-08-12T06:12:35.045690Z",
     "shell.execute_reply": "2025-08-12T06:12:35.044889Z"
    },
    "papermill": {
     "duration": 0.021341,
     "end_time": "2025-08-12T06:12:35.047134",
     "exception": false,
     "start_time": "2025-08-12T06:12:35.025793",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "False\n"
     ]
    },
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.2, \"interactionType\": 1, \"questionType\": 1, \"questionId\": \"3_WeatherDebug\", \"learnToolsVersion\": \"0.3.5\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#33cc33\">Correct:</span> \n",
       "\n",
       "One example of a failing test case is:\n",
       "\n",
       "```python\n",
       "have_umbrella = False\n",
       "rain_level = 0.0\n",
       "have_hood = False\n",
       "is_workday = False\n",
       "```\n",
       "\n",
       "Clearly we're prepared for the weather in this case. It's not raining. Not only that, it's not a workday, so we don't even need to leave the house! But our function will return False on these inputs.\n",
       "\n",
       "The key problem is that Python implictly parenthesizes the last part as:\n",
       "\n",
       "```python\n",
       "(not (rain_level > 0)) and is_workday\n",
       "```\n",
       "\n",
       "Whereas what we were trying to express would look more like:\n",
       "\n",
       "```python\n",
       "not (rain_level > 0 and is_workday)\n",
       "```\n"
      ],
      "text/plain": [
       "Correct: \n",
       "\n",
       "One example of a failing test case is:\n",
       "\n",
       "```python\n",
       "have_umbrella = False\n",
       "rain_level = 0.0\n",
       "have_hood = False\n",
       "is_workday = False\n",
       "```\n",
       "\n",
       "Clearly we're prepared for the weather in this case. It's not raining. Not only that, it's not a workday, so we don't even need to leave the house! But our function will return False on these inputs.\n",
       "\n",
       "The key problem is that Python implictly parenthesizes the last part as:\n",
       "\n",
       "```python\n",
       "(not (rain_level > 0)) and is_workday\n",
       "```\n",
       "\n",
       "Whereas what we were trying to express would look more like:\n",
       "\n",
       "```python\n",
       "not (rain_level > 0 and is_workday)\n",
       "```"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def prepared_for_weather(have_umbrella, rain_level, have_hood, is_workday):\n",
    "    # Don't change this code. Our goal is just to find the bug, not fix it!\n",
    "    return have_umbrella or rain_level < 5 and have_hood or not rain_level > 0 and is_workday\n",
    "\n",
    "# Change the values of these inputs so they represent a case where prepared_for_weather\n",
    "# returns the wrong answer.\n",
    "have_umbrella = False\n",
    "rain_level = 1.0\n",
    "have_hood = False\n",
    "is_workday = False\n",
    "\n",
    "# Check what the function returns given the current values of the variables above\n",
    "actual = prepared_for_weather(have_umbrella, rain_level, have_hood, is_workday)\n",
    "print(actual)\n",
    "\n",
    "# Check your answer\n",
    "q3.check()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "71bfd7c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-12T06:12:35.069543Z",
     "iopub.status.busy": "2025-08-12T06:12:35.068811Z",
     "iopub.status.idle": "2025-08-12T06:12:35.072425Z",
     "shell.execute_reply": "2025-08-12T06:12:35.071670Z"
    },
    "papermill": {
     "duration": 0.015799,
     "end_time": "2025-08-12T06:12:35.073998",
     "exception": false,
     "start_time": "2025-08-12T06:12:35.058199",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#q3.hint()\n",
    "#q3.solution()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "17e115d0",
   "metadata": {
    "papermill": {
     "duration": 0.009543,
     "end_time": "2025-08-12T06:12:35.093484",
     "exception": false,
     "start_time": "2025-08-12T06:12:35.083941",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 4.\n",
    "\n",
    "The function `is_negative` below is implemented correctly - it returns True if the given number is negative and False otherwise.\n",
    "\n",
    "However, it's more verbose than it needs to be. We can actually reduce the number of lines of code in this function by *75%* while keeping the same behaviour. \n",
    "\n",
    "See if you can come up with an equivalent body that uses just **one line** of code, and put it in the function `concise_is_negative`. (HINT: you don't even need Python's ternary syntax)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "53a06092",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-12T06:12:35.114381Z",
     "iopub.status.busy": "2025-08-12T06:12:35.113817Z",
     "iopub.status.idle": "2025-08-12T06:12:35.121544Z",
     "shell.execute_reply": "2025-08-12T06:12:35.120673Z"
    },
    "papermill": {
     "duration": 0.019857,
     "end_time": "2025-08-12T06:12:35.122990",
     "exception": false,
     "start_time": "2025-08-12T06:12:35.103133",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 4, \"interactionType\": 1, \"questionType\": 2, \"questionId\": \"4_ConciseIsNegative\", \"learnToolsVersion\": \"0.3.5\", \"valueTowardsCompletion\": 0.0, \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#ccaa33\">Check:</span> When you've updated the starter code, `check()` will tell you whether your code is correct. "
      ],
      "text/plain": [
       "Check: When you've updated the starter code, `check()` will tell you whether your code is correct. "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def is_negative(number):\n",
    "    return number < 0\n",
    "        \n",
    "\n",
    "def concise_is_negative(number):\n",
    "    pass # Your code goes here (try to keep it to one line!)\n",
    "\n",
    "# Check your answer\n",
    "q4.check()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "0fd17017",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-12T06:12:35.145745Z",
     "iopub.status.busy": "2025-08-12T06:12:35.145039Z",
     "iopub.status.idle": "2025-08-12T06:12:35.148988Z",
     "shell.execute_reply": "2025-08-12T06:12:35.148108Z"
    },
    "papermill": {
     "duration": 0.016978,
     "end_time": "2025-08-12T06:12:35.150453",
     "exception": false,
     "start_time": "2025-08-12T06:12:35.133475",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#q4.hint()\n",
    "#q4.solution()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a8627857",
   "metadata": {
    "papermill": {
     "duration": 0.009905,
     "end_time": "2025-08-12T06:12:35.170731",
     "exception": false,
     "start_time": "2025-08-12T06:12:35.160826",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 5a.\n",
    "\n",
    "The boolean variables `ketchup`, `mustard` and `onion` represent whether a customer wants a particular topping on their hot dog. We want to implement a number of boolean functions that correspond to some yes-or-no questions about the customer's order. For example:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "4f955cee",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-12T06:12:35.192465Z",
     "iopub.status.busy": "2025-08-12T06:12:35.191879Z",
     "iopub.status.idle": "2025-08-12T06:12:35.196199Z",
     "shell.execute_reply": "2025-08-12T06:12:35.195374Z"
    },
    "papermill": {
     "duration": 0.016977,
     "end_time": "2025-08-12T06:12:35.197871",
     "exception": false,
     "start_time": "2025-08-12T06:12:35.180894",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def onionless(ketchup, mustard, onion):\n",
    "    \"\"\"Return whether the customer doesn't want onions.\n",
    "    \"\"\"\n",
    "    return not onion"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "2d2132b5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-12T06:12:35.219449Z",
     "iopub.status.busy": "2025-08-12T06:12:35.218879Z",
     "iopub.status.idle": "2025-08-12T06:12:35.225467Z",
     "shell.execute_reply": "2025-08-12T06:12:35.224778Z"
    },
    "papermill": {
     "duration": 0.018679,
     "end_time": "2025-08-12T06:12:35.226764",
     "exception": false,
     "start_time": "2025-08-12T06:12:35.208085",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.2, \"interactionType\": 1, \"questionType\": 2, \"questionId\": \"5.1_AllToppings\", \"learnToolsVersion\": \"0.3.5\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#33cc33\">Correct</span>"
      ],
      "text/plain": [
       "Correct"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def wants_all_toppings(ketchup, mustard, onion):\n",
    "    \"\"\"Return whether the customer wants \"the works\" (all 3 toppings)\n",
    "    \"\"\"\n",
    "    return ketchup and mustard and onion \n",
    "    pass\n",
    "\n",
    "# Check your answer\n",
    "q5.a.check()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "250a5b1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-12T06:12:35.248071Z",
     "iopub.status.busy": "2025-08-12T06:12:35.247767Z",
     "iopub.status.idle": "2025-08-12T06:12:35.251324Z",
     "shell.execute_reply": "2025-08-12T06:12:35.250552Z"
    },
    "papermill": {
     "duration": 0.015743,
     "end_time": "2025-08-12T06:12:35.252693",
     "exception": false,
     "start_time": "2025-08-12T06:12:35.236950",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#q5.a.hint()\n",
    "#q5.a.solution()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f1650e0f",
   "metadata": {
    "papermill": {
     "duration": 0.009919,
     "end_time": "2025-08-12T06:12:35.272843",
     "exception": false,
     "start_time": "2025-08-12T06:12:35.262924",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 5b.\n",
    "\n",
    "For the next function, fill in the body to match the English description in the docstring. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "dd672401",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-12T06:12:35.295410Z",
     "iopub.status.busy": "2025-08-12T06:12:35.294783Z",
     "iopub.status.idle": "2025-08-12T06:12:35.301895Z",
     "shell.execute_reply": "2025-08-12T06:12:35.300929Z"
    },
    "papermill": {
     "duration": 0.019512,
     "end_time": "2025-08-12T06:12:35.303272",
     "exception": false,
     "start_time": "2025-08-12T06:12:35.283760",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.2, \"interactionType\": 1, \"questionType\": 2, \"questionId\": \"5.3_OneSauce\", \"learnToolsVersion\": \"0.3.5\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#33cc33\">Correct</span>"
      ],
      "text/plain": [
       "Correct"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def exactly_one_sauce(ketchup, mustard, onion):\n",
    "    \"\"\"Return whether the customer wants either ketchup or mustard, but not both.\n",
    "    (You may be familiar with this operation under the name \"exclusive or\")\n",
    "    \"\"\"\n",
    "    return (ketchup and not mustard)  or  (mustard and not ketchup)  \n",
    "    pass\n",
    "\n",
    "# Check your answer\n",
    "q5.c.check()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "dc09115e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-12T06:12:35.325179Z",
     "iopub.status.busy": "2025-08-12T06:12:35.324896Z",
     "iopub.status.idle": "2025-08-12T06:12:35.328747Z",
     "shell.execute_reply": "2025-08-12T06:12:35.327713Z"
    },
    "papermill": {
     "duration": 0.01656,
     "end_time": "2025-08-12T06:12:35.330211",
     "exception": false,
     "start_time": "2025-08-12T06:12:35.313651",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#q5.c.hint()\n",
    "#q5.c.solution()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "96fae068",
   "metadata": {
    "papermill": {
     "duration": 0.009969,
     "end_time": "2025-08-12T06:12:35.350679",
     "exception": false,
     "start_time": "2025-08-12T06:12:35.340710",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 6. <span title=\"A bit spicy\" style=\"color: darkgreen \">🌶️</span>\n",
    "\n",
    "We’ve seen that calling `bool()` on an integer returns `False` if it’s equal to 0 and `True` otherwise. What happens if we call `int()` on a bool? Try it out in the notebook cell below.\n",
    "\n",
    "Can you take advantage of this to write a succinct function that corresponds to the English sentence \"does the customer want exactly one topping?\"?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "a288c1c7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-12T06:12:35.372709Z",
     "iopub.status.busy": "2025-08-12T06:12:35.372061Z",
     "iopub.status.idle": "2025-08-12T06:12:35.379621Z",
     "shell.execute_reply": "2025-08-12T06:12:35.378908Z"
    },
    "papermill": {
     "duration": 0.020026,
     "end_time": "2025-08-12T06:12:35.380916",
     "exception": false,
     "start_time": "2025-08-12T06:12:35.360890",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.2, \"interactionType\": 1, \"questionType\": 2, \"questionId\": \"6_OneTopping\", \"learnToolsVersion\": \"0.3.5\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#33cc33\">Correct:</span> \n",
       "\n",
       "This condition would be pretty complicated to express using just `and`, `or` and `not`, but using boolean-to-integer conversion gives us this short solution:\n",
       "```python\n",
       "return (int(ketchup) + int(mustard) + int(onion)) == 1\n",
       "```\n",
       "\n",
       "Fun fact: we don't technically need to call `int` on the arguments. Just by doing addition with booleans, Python implicitly does the integer conversion. So we could also write...\n",
       "\n",
       "```python\n",
       "return (ketchup + mustard + onion) == 1\n",
       "```"
      ],
      "text/plain": [
       "Correct: \n",
       "\n",
       "This condition would be pretty complicated to express using just `and`, `or` and `not`, but using boolean-to-integer conversion gives us this short solution:\n",
       "```python\n",
       "return (int(ketchup) + int(mustard) + int(onion)) == 1\n",
       "```\n",
       "\n",
       "Fun fact: we don't technically need to call `int` on the arguments. Just by doing addition with booleans, Python implicitly does the integer conversion. So we could also write...\n",
       "\n",
       "```python\n",
       "return (ketchup + mustard + onion) == 1\n",
       "```"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def exactly_one_topping(ketchup, mustard, onion):\n",
    "    \"\"\"Return whether the customer wants exactly one of the three available toppings\n",
    "    on their hot dog.\n",
    "    \"\"\"\n",
    "    return (int(ketchup) + int(mustard) + int(onion) == 1) #its the right way \n",
    "    return (ketchup) + (mustard) + (onion) == 1 #but this is the best way\n",
    "    pass\n",
    "\n",
    "# Check your answer\n",
    "q6.check()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "fad9908a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-12T06:12:35.403490Z",
     "iopub.status.busy": "2025-08-12T06:12:35.402875Z",
     "iopub.status.idle": "2025-08-12T06:12:35.406562Z",
     "shell.execute_reply": "2025-08-12T06:12:35.405667Z"
    },
    "papermill": {
     "duration": 0.016593,
     "end_time": "2025-08-12T06:12:35.408071",
     "exception": false,
     "start_time": "2025-08-12T06:12:35.391478",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "#q6.hint()\n",
    "#q6.solution()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a23c3135",
   "metadata": {
    "papermill": {
     "duration": 0.010111,
     "end_time": "2025-08-12T06:12:35.429172",
     "exception": false,
     "start_time": "2025-08-12T06:12:35.419061",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 7. <span title=\"A bit spicy\" style=\"color: darkgreen \">🌶️</span> (Optional)\n",
    "\n",
    "In this problem we'll be working with a simplified version of [blackjack](https://en.wikipedia.org/wiki/Blackjack) (aka twenty-one). In this version there is one player (who you'll control) and a dealer. Play proceeds as follows:\n",
    "\n",
    "- The player is dealt two face-up cards. The dealer is dealt one face-up card.\n",
    "- The player may ask to be dealt another card ('hit') as many times as they wish. If the sum of their cards exceeds 21, they lose the round immediately.\n",
    "- The dealer then deals additional cards to himself until either:\n",
    "    - the sum of the dealer's cards exceeds 21, in which case the player wins the round\n",
    "    - the sum of the dealer's cards is greater than or equal to 17. If the player's total is greater than the dealer's, the player wins. Otherwise, the dealer wins (even in case of a tie).\n",
    "    \n",
    "When calculating the sum of cards, Jack, Queen, and King count for 10. Aces can count as 1 or 11 (when referring to a player's \"total\" above, we mean the largest total that can be made without exceeding 21. So e.g. A+8 = 19, A+8+8 = 17)\n",
    "\n",
    "For this problem, you'll write a function representing the player's decision-making strategy in this game. We've provided a very unintelligent implementation below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "47db4701",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-12T06:12:35.451326Z",
     "iopub.status.busy": "2025-08-12T06:12:35.451034Z",
     "iopub.status.idle": "2025-08-12T06:12:35.455770Z",
     "shell.execute_reply": "2025-08-12T06:12:35.455053Z"
    },
    "papermill": {
     "duration": 0.017535,
     "end_time": "2025-08-12T06:12:35.457232",
     "exception": false,
     "start_time": "2025-08-12T06:12:35.439697",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def should_hit(player_total, dealer_card_val, player_has_ace):\n",
    "    \"\"\"Return True if player should take another card, False otherwise.\"\"\"\n",
    "    \n",
    "    # Basic blackjack strategy rules\n",
    "    if player_total <= 11:\n",
    "        return True\n",
    "    elif player_total == 12 and dealer_card_val in [4, 5, 6]:\n",
    "        return False\n",
    "    elif 13 <= player_total <= 16:\n",
    "        # Stand if dealer is weak, hit otherwise\n",
    "        return dealer_card_val not in [2, 3, 4, 5, 6]\n",
    "    else:  # total >= 17\n",
    "        return False\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "7ce91d69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-12T06:12:35.479588Z",
     "iopub.status.busy": "2025-08-12T06:12:35.479301Z",
     "iopub.status.idle": "2025-08-12T06:12:35.484349Z",
     "shell.execute_reply": "2025-08-12T06:12:35.483429Z"
    },
    "papermill": {
     "duration": 0.018072,
     "end_time": "2025-08-12T06:12:35.485948",
     "exception": false,
     "start_time": "2025-08-12T06:12:35.467876",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Player starts with 2 and 2 (total = 4)\n",
      "Dealer starts with 2\n",
      "\n",
      "__Player's turn__\n",
      "Player hits and receives 7. (total = 11)\n",
      "Player hits and receives 3. (total = 14)\n",
      "Player stays\n",
      "\n",
      "__Dealer's turn__\n",
      "Dealer hits and receives A. (total = 13)\n",
      "Dealer hits and receives 6. (total = 19)\n",
      "Dealer stands.\n",
      "Dealer wins. 19 >= 14\n"
     ]
    }
   ],
   "source": [
    "q7.simulate_one_game()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "4ea60100",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-12T06:12:35.509192Z",
     "iopub.status.busy": "2025-08-12T06:12:35.508880Z",
     "iopub.status.idle": "2025-08-12T06:12:36.512378Z",
     "shell.execute_reply": "2025-08-12T06:12:36.511407Z"
    },
    "papermill": {
     "duration": 1.017098,
     "end_time": "2025-08-12T06:12:36.513974",
     "exception": false,
     "start_time": "2025-08-12T06:12:35.496876",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Player won 20913 out of 50000 games (win rate = 41.8%)\n"
     ]
    }
   ],
   "source": [
    "q7.simulate(n_games=50000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "fa1878ec",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-12T06:12:36.537316Z",
     "iopub.status.busy": "2025-08-12T06:12:36.536455Z",
     "iopub.status.idle": "2025-08-12T06:12:36.542418Z",
     "shell.execute_reply": "2025-08-12T06:12:36.541723Z"
    },
    "papermill": {
     "duration": 0.018795,
     "end_time": "2025-08-12T06:12:36.543757",
     "exception": false,
     "start_time": "2025-08-12T06:12:36.524962",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def should_hit(player_total, dealer_card_val, player_has_ace):\n",
    "    \"\"\"Improved Blackjack strategy using dealer upcard and ace handling.\"\"\"\n",
    "\n",
    "    # --- Soft totals (Ace counted as 11 without busting) ---\n",
    "    if player_has_ace:\n",
    "        # Soft 17 or less: always hit\n",
    "        if player_total <= 17:\n",
    "            return True\n",
    "        # Soft 18: stand against dealer 2, 7, 8; hit against 9, 10, Ace; otherwise double (hit in our sim)\n",
    "        if player_total == 18:\n",
    "            return dealer_card_val in [9, 10, 11]\n",
    "        # Soft 19 or more: stand\n",
    "        return False\n",
    "\n",
    "    # --- Hard totals (no usable Ace) ---\n",
    "    if player_total <= 11:\n",
    "        return True  # can't bust, take another card\n",
    "    elif player_total == 12:\n",
    "        # Stand if dealer is weak (4–6), hit otherwise\n",
    "        return dealer_card_val not in [4, 5, 6]\n",
    "    elif 13 <= player_total <= 16:\n",
    "        # Stand if dealer is weak (2–6), hit otherwise\n",
    "        return dealer_card_val not in [2, 3, 4, 5, 6]\n",
    "    else:\n",
    "        return False  # 17 or more, stand\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [],
   "dockerImageVersionId": 31089,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 9.459749,
   "end_time": "2025-08-12T06:12:37.074886",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-12T06:12:27.615137",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
